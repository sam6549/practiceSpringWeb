CREATE SEQUENCE SEQ_BOARD;

CREATE TABLE TBL_BOARD (
	BNO NUMBER(10,0),
	TITLE VARCHAR2(200) NOT NULL,
	CONTENT VARCHAR2(2000) NOT NULL,
	WRITER VARCHAR2(50) NOT NULL,
	REGDATE DATE DEFAULT SYSDATE,
	UPDATEDATE DATE DEFAULT SYSDATE
);

ALTER TABLE TBL_BOARD ADD CONSTRAINT PK_BOARD
PRIMARY KEY (BNO);

INSERT INTO TBL_BOARD(BNO, TITLE, CONTENT, WRITER)
VALUES (SEQ_BOARD.NEXTVAL, '테스트 제목', '테스트 내용', 'user00');

--재귀복사를 통해서 데이터의 개수를 늘린다. 반복해서 여러번 실행
INSERT INTO TBL_BOARD (BNO,TITLE,CONTENT,WRITER)
(SELECT SEQ_BOARD.NEXTVAL, TITLE, CONTENT, WRITER FROM TBL_BOARD);


CREATE TABLE TBL_REPLY(
	RNO NUMBER(10,0),
	BNO NUMBER(10,0) NOT NULL,
	REPLY VARCHAR2(1000) NOT NULL,
	REPLYER VARCHAR2(50) NOT NULL,
	REPLYDATE DATE DEFAULT SYSDATE,
	UPDATEDATE DATE DEFAULT SYSDATE
);

CREATE SEQUENCE SEQ_REPLY;

ALTER TABLE TBL_REPLY ADD CONSTRAINT PK_REPLY PRIMARY KEY (RNO);

ALTER TABLE TBL_REPLY ADD CONSTRAINT FK_REPLY_BOARD
FOREIGN KEY (BNO) REFERENCES TBL_BOARD (BNO);

CREATE INDEX IDX_REPLY ON TBL_REPLY (BNO DESC, RNO ASC);

ALTER TABLE TBL_BOARD ADD (REPLYCNT NUMBER DEFAULT 0);

UPDATE TBL_BOARD SET REPLYCNT = (SELECT COUNT(RNO) FROM TBL_REPLY WHERE TBL_REPLY.BNO = TBL_BOARD.BNO);

CREATE INDEX IDX_REPLY_RNO_DESC ON TBL_REPLY (BNO DESC, RNO DESC);

CREATE TABLE TBL_ATTACH(
	UUID VARCHAR2(100) NOT NULL,
	UPLOADPATH VARCHAR2(200) NOT NULL,
	FILENAME VARCHAR2(100) NOT NULL,
	FILETYPE CHAR(1) DEFAULT 'I',
	BNO NUMBER(10,0)
);

ALTER TABLE TBL_ATTACH ADD CONSTRAINT PK_ATTACH PRIMARY KEY (UUID);
ALTER TABLE TBL_ATTACH ADD CONSTRAINT FF_BOARD_ATTACH FOREIGN KEY (BNO) REFERENCES TBL_BOARD(BNO);



cron설정
123456 7
0*****(*)
1:seconds(0~59)
2:minutes(0~59)
3:hours(0~23)
4:day(1~31)
5:months(1~12)
6:day of week(1~7)
7:year(optional)

*:모든수
?:제외
~:기간
.:특정시간
/:시작시간과 반복시간
L:마지막
W:가까운 평일

CREATE TABLE USERS(
	USERNAME VARCHAR2(50) NOT NULL PRIMARY KEY,
	PASSWORD VARCHAR2(50) NOT NULL,
	ENABLED CHAR(1) DEFAULT '1');

CREATE TABLE AUTHORITIES(
	USERNAME VARCHAR2(50) NOT NULL,
	AUTHORITY VARCHAR2(50) NOT NULL,
	CONSTRAINT FK_AUTHORITIES_USERS FOREIGN KEY(USERNAME) REFERENCES USERS(USERNAME));

CREATE UNIQUE INDEX IX_AUTH_USERNAME ON AUTHORITIES (USERNAME, AUTHORITY);

INSERT INTO USERS(USERNAME, PASSWORD) VALUES('user00', 'pw00');
INSERT INTO USERS(USERNAME, PASSWORD) VALUES('mamber00', 'pw00');
INSERT INTO USERS(USERNAME, PASSWORD) VALUES('admin00', 'pw00');

INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES ('user00', 'ROLE_USER');
INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES ('member00', 'ROLE_MANAGER');
INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES ('admin00', 'ROLE_MANAGER');
INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES ('admin00', 'ROLE_ADMIN');
		

CREATE TABLE TBL_MEMBER(
	USERID VARCHAR2(50) NOT NULL PRIMARY KEY,
	USERPW VARCHAR2(100) NOT NULL,
	USERNAME VARCHAR2(100) NOT NULL,
	REGDATE DATE DEFAULT SYSDATE,
	UPDATEDATE DATE DEFAULT SYSDATE,
	ENABLED CHAR(1) DEFAULT '1');

CREATE TABLE TBL_MEMBER_AUTH (
	USERID VARCHAR2(50) NOT NULL,
	AUTH VARCHAR2(50) NOT NULL,
	CONSTRAINT FK_MEMBER_AUTH FOREIGN KEY(USERID) REFERENCES TBL_MEMBER(USERID)
);

CREATE TABLE PERSISTENT_LOGINS(
	USERNAME VARCHAR(64) NOT NULL,
	SERIES VARCHAR(64) PRIMARY KEY,
	TOKEN VARCHAR(64) NOT NULL,
	LAST_USED TIMESTAMP NOT NULL
);